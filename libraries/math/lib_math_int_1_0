###############################################
# Library for integer math V1.0               #
# Revision 0                                  #
#                                             #
# Created by Guillaume Guillet                #
# 22.11.2021                                  #
###############################################

#[ Description
This library provide math functions for integers with
little-endian result on 8, 16 or 32 bits
]#

#[ Changelog

Revision 0 :
    - initial release
]#

#LIB pool
pool MINT_POOL 0 #Dynamic size, dynamic start address
var $_MINT_OUT_16:MINT_POOL 2
var $_MINT_OUT_32:MINT_POOL 4

var $_MINT_8_A:MINT_POOL
var $_MINT_8_B:MINT_POOL

var $_MINT_16_A:MINT_POOL 2
var $_MINT_16_B:MINT_POOL 2

var $_MINT_32_A:MINT_POOL 4
var $_MINT_32_B:MINT_POOL 4

var $_MINT_RET_A_LSB:MINT_POOL
var $_MINT_RET_A:MINT_POOL
var $_MINT_RET_A_MSB:MINT_POOL

# https://www.techiedelight.com/multiply-16-bit-integers-using-8-bit-multiplier/


#Add two unsigned 8bits value into a 16bits value
#[ 'set' argument

Value to the left :
_MINT_8_A
Value to the right :
_MINT_8_B

Output value (2bytes) :
_MINT_OUT_16

C equivalent :
    uint16_t c;
    c = static_cast<uint8_t>(a+b)<a ? 0x0100 : 0x0000;
    return static_cast<uint16_t>(static_cast<uint8_t>(a+b)) | c;
]#
function MINT_8to16_u_add
    #(a+b)
    do $_MINT_8_B:MINT_POOL + $_MINT_8_A:MINT_POOL
    
    #(a+b)<a
    write BOPLEFT _result
    select OP <
    write BOPRIGHT _ram
    
    #assembling result
    affect $_MINT_OUT_16:MINT_POOL _result 1
    select OP A_OPL
    affect $_MINT_OUT_16:MINT_POOL _result 0
    
    jump $_MINT_RET_A_LSB:MINT_POOL $_MINT_RET_A:MINT_POOL $_MINT_RET_A_MSB:MINT_POOL
end

#Add two unsigned 16bits value into a 32bits value
#[ 'set' argument

Value to the left :
_MINT_16_A
Value to the right :
_MINT_16_B

Output value (2bytes) :
_MINT_OUT_32

C equivalent :
    uint32_t result = 0;

    uint8_t a_lsb = a&0x00FF;
    uint8_t a_msb = (a&0xFF00)>>8;
    uint8_t b_lsb = b&0x00FF;
    uint8_t b_msb = (b&0xFF00)>>8;

    uint8_t c_lsb;
    c_lsb = static_cast<uint8_t>(a_lsb+b_lsb)<a_lsb ? 0x01 : 0x00;

    result |= static_cast<uint32_t>(static_cast<uint8_t>(a_lsb+b_lsb));

    uint8_t c_msb = static_cast<uint8_t>(a_msb+c_lsb)<a_msb ? 0x01 : 0x00;
    c_msb |= static_cast<uint8_t>(a_msb+b_msb+c_lsb)<static_cast<uint8_t>(a_msb+c_lsb) ? 0x01 : 0x00;

    result |= (static_cast<uint32_t>(static_cast<uint8_t>(a_msb+b_msb+c_lsb))<<8) | (c_msb>0?0x00010000:0x00000000);

    return result;
]#
function MINT_16to32_u_add
    ##getting c_lsb
    
    #(a_lsb+b_lsb)
    select OP +
    get $_MINT_16_B:MINT_POOL 0
    write BOPRIGHT _ram
    get $_MINT_16_A:MINT_POOL 0
    write BOPLEFT _ram

    #(a_lsb+b_lsb)<a_lsb
    write BOPLEFT _result
    select OP <
    write BOPRIGHT _ram
    #store result in accumulator right
    write BOPRIGHT _result
    select OP A_OPR
    write BOPRIGHT _result
    
    #writing first byte of the 4
    select OP A_OPL
    affect $_MINT_OUT_32:MINT_POOL _result 0
    
    ##getting c_msb
    
    #(a_msb+c_lsb)
    select OP OP_AR
    get $_MINT_16_A:MINT_POOL 1
    write BOPLEFT _ram
    write BOPRIGHT _result
    select OP +
    
    #(a_msb+c_lsb)<a_msb
    write BOPLEFT _result
    write BOPRIGHT _ram
    select OP <
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(a_msb+b_msb+c_lsb)
    select OP +
    write BOPLEFT _ram
    get $_MINT_16_B:MINT_POOL 1
    write BOPRIGHT _ram
    write BOPLEFT _result
    select OP OP_AR
    write BOPRIGHT _result
    select OP +
    
    #writing second byte of the 4
    get $_MINT_OUT_32:MINT_POOL 1
    affect _result
    
    #(a_msb+c_lsb)
    get $_MINT_16_A:MINT_POOL 1
    write BOPLEFT _ram
    select OP +
    
    #(a_msb+b_msb+c_lsb)<(a_msb+c_lsb)
    write BOPRIGHT _result
    select OP <
    get $_MINT_OUT_32:MINT_POOL 1
    write BOPLEFT _ram
    
    #c_msb |= ...
    write BOPRIGHT _result
    select OP OP_AL
    write BOPLEFT _result
    select OP |
    
    #writing third byte of the 4
    get $_MINT_OUT_32:MINT_POOL 2
    affect _result
    
    #writing fourth byte of the 4
    #TODO: maybe just don't write 0 ? And let user clean that ?
    get $_MINT_OUT_32:MINT_POOL 3
    affect 0x00
    
    jump $_MINT_RET_A_LSB:MINT_POOL $_MINT_RET_A:MINT_POOL $_MINT_RET_A_MSB:MINT_POOL
end

#Add two unsigned 32bits value into a 32bits value
#[ 'set' argument

Value to the left :
_MINT_32_A
Value to the right :
_MINT_32_B

Output value (2bytes) :
_MINT_OUT_32

C equivalent :
    uint32_t result = 0;

    uint8_t a_lsb = a&0x000000FF;
    uint8_t a_1 = (a&0x0000FF00)>>8;
    uint8_t a_2 = (a&0x00FF0000)>>16;
    uint8_t a_msb = (a&0xFF000000)>>24;

    uint8_t b_lsb = b&0x000000FF;
    uint8_t b_1 = (b&0x0000FF00)>>8;
    uint8_t b_2 = (b&0x00FF0000)>>16;
    uint8_t b_msb = (b&0xFF000000)>>24;

    uint8_t c_lsb;
    c_lsb = static_cast<uint8_t>(a_lsb+b_lsb)<a_lsb ? 0x01 : 0x00;

    result |= static_cast<uint32_t>(static_cast<uint8_t>(a_lsb+b_lsb)); //First byte

    uint8_t c_1 = static_cast<uint8_t>(a_1+c_lsb)<a_1 ? 0x01 : 0x00;
    c_1 |= static_cast<uint8_t>(a_1+b_1+c_lsb)<static_cast<uint8_t>(a_1+c_lsb) ? 0x01 : 0x00;

    result |= (static_cast<uint32_t>(static_cast<uint8_t>(a_1+b_1+c_lsb))<<8); //Second byte

    uint8_t c_2 = static_cast<uint8_t>(a_2+c_1)<a_2 ? 0x01 : 0x00;
    c_2 |= static_cast<uint8_t>(a_2+b_2+c_1)<static_cast<uint8_t>(a_2+c_1) ? 0x01 : 0x00;

    result |= (static_cast<uint32_t>(static_cast<uint8_t>(a_2+b_2+c_1))<<16); //Third byte

    result |= (static_cast<uint32_t>(static_cast<uint8_t>(a_msb+b_msb+c_2))<<24); //Fourth byte

    return result;
]#
function MINT_32to32_u_add
    ##getting c_lsb
    
    #(a_lsb+b_lsb)
    select OP +
    get $_MINT_32_B:MINT_POOL 0
    write BOPRIGHT _ram
    get $_MINT_32_A:MINT_POOL 0
    write BOPLEFT _ram

    #(a_lsb+b_lsb)<a_lsb
    write BOPLEFT _result
    select OP <
    write BOPRIGHT _ram
    #store result in accumulator right
    write BOPRIGHT _result
    select OP A_OPR
    write BOPRIGHT _result
    
    #writing first byte of the 4
    select OP A_OPL
    affect $_MINT_OUT_32:MINT_POOL _result 0
    
    ##getting c_1
    
    #(a_1+c_lsb)
    select OP OP_AR
    get $_MINT_32_A:MINT_POOL 1
    write BOPLEFT _ram
    write BOPRIGHT _result
    select OP +
    
    #(a_1+c_lsb)<a_1
    write BOPLEFT _result
    write BOPRIGHT _ram
    select OP <
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(a_1+b_1+c_lsb)
    select OP +
    write BOPLEFT _ram
    get $_MINT_32_B:MINT_POOL 1
    write BOPRIGHT _ram
    write BOPLEFT _result
    select OP OP_AR
    write BOPRIGHT _result
    select OP +
    
    #writing second byte of the 4
    get $_MINT_OUT_32:MINT_POOL 1
    affect _result
    
    #(a_1+c_lsb)
    get $_MINT_16_A:MINT_POOL 1
    write BOPLEFT _ram
    select OP +
    
    #(a_1+b_1+c_lsb)<(a_1+c_lsb)
    write BOPRIGHT _result
    select OP <
    get $_MINT_OUT_32:MINT_POOL 1
    write BOPLEFT _ram
    
    #c_1 |= ...
    write BOPRIGHT _result
    select OP OP_AL
    write BOPLEFT _result
    select OP |
    #store result in accumulator right
    write BOPRIGHT _result
    select OP A_OPR
    write BOPRIGHT _result
    
    ##getting c_2
    
    #(a_2+c_1)
    select OP OP_AR
    get $_MINT_32_A:MINT_POOL 2
    write BOPLEFT _ram
    write BOPRIGHT _result
    select OP +
    
    #(a_2+c_1)<a_2
    write BOPLEFT _result
    write BOPRIGHT _ram
    select OP <
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(a_2+b_2+c_1)
    select OP +
    write BOPLEFT _ram
    get $_MINT_32_B:MINT_POOL 2
    write BOPRIGHT _ram
    write BOPLEFT _result
    select OP OP_AR
    write BOPRIGHT _result
    select OP +
    
    #writing third byte of the 4
    get $_MINT_OUT_32:MINT_POOL 2
    affect _result
    
    #(a_2+c_1)
    get $_MINT_32_A:MINT_POOL 2
    write BOPLEFT _ram
    select OP +
    
    #(a_2+b_2+c_1)<(a_2+c_1)
    write BOPRIGHT _result
    select OP <
    get $_MINT_OUT_32:MINT_POOL 2
    write BOPLEFT _ram
    
    #c_2 |= ...
    write BOPRIGHT _result
    select OP OP_AL
    write BOPLEFT _result
    select OP |
    
    #(a_msb+b_msb+c_2)
    write BOPLEFT _result
    select OP +
    get $_MINT_32_B:MINT_POOL 3
    write BOPRIGHT _ram
    
    write BOPLEFT _result
    get $_MINT_32_A:MINT_POOL 3
    write BOPRIGHT _ram
    
    #writing fourth byte of the 4
    get $_MINT_OUT_32:MINT_POOL 3
    affect _result
    
    jump $_MINT_RET_A_LSB:MINT_POOL $_MINT_RET_A:MINT_POOL $_MINT_RET_A_MSB:MINT_POOL
end
