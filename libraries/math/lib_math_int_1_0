###############################################
# Library for integer math V1.0               #
# Revision 0                                  #
#                                             #
# Created by Guillaume Guillet                #
# 22.11.2021                                  #
###############################################

#[ Description
This library provide math functions for integers with
little-endian result on 8, 16 or 32 bits
]#

#[ Changelog

Revision 0 :
    - initial release
]#

#LIB pool
pool MINT_POOL 0 #Dynamic size, dynamic start address
var $_MINT_OUT_16:MINT_POOL 2
var $_MINT_OUT_32:MINT_POOL 4

var $_MINT_8_A:MINT_POOL
var $_MINT_8_B:MINT_POOL

var $_MINT_16_A:MINT_POOL 2
var $_MINT_16_B:MINT_POOL 2

var $_MINT_RET_A_LSB:MINT_POOL
var $_MINT_RET_A:MINT_POOL
var $_MINT_RET_A_MSB:MINT_POOL

# https://www.techiedelight.com/multiply-16-bit-integers-using-8-bit-multiplier/


#Add two unsigned 8bits value into a 16bits value
#[ 'set' argument

Value to the left :
_MINT_8_A
Value to the right :
_MINT_8_B

Output value (2bytes) :
_MINT_OUT_16

C equivalent :
    uint8_t c;
    c = (a>>1) + (b>>1) + (a&b&0x01);
    return static_cast<uint16_t>(static_cast<uint8_t>(a+b)) | (c>127?0x0100:0x0000);
]#
function MINT_8to16_u_add
    #(a>>1)
    do $_MINT_8_A:MINT_POOL >> 1
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(b>>1)
    do $_MINT_8_B:MINT_POOL >> 1
    #store result in operator right
    write BOPRIGHT _result
    
    #store accumulator left into operator left
    select OP OP_AL
    write BOPLEFT _result
    
    #(a>>1) + (b>>1)
    select OP +
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(a&b&0x01)
    do $_MINT_8_A:MINT_POOL & $_MINT_8_B:MINT_POOL
    do _result 0x01
    
    #store result in operator right
    write BOPRIGHT _result
    
    #store accumulator left into operator left
    select OP OP_AL
    write BOPLEFT _result
    
    #(a>>1) + (b>>1) + (a&b&0x01)
    select OP +
    
    #(c>127?0x0100:0x0000)
    do _result 127
    select OP >
    
    affect $_MINT_OUT_16:MINT_POOL _result 1
    do $_MINT_8_A:MINT_POOL + $_MINT_8_B:MINT_POOL
    affect $_MINT_OUT_16:MINT_POOL _result 0
    
    jump $_MINT_RET_A_LSB:MINT_POOL $_MINT_RET_A:MINT_POOL $_MINT_RET_A_MSB:MINT_POOL
end

#Add two unsigned 16bits value into a 32bits value
#[ 'set' argument

Value to the left :
_MINT_16_A
Value to the right :
_MINT_16_B

Output value (2bytes) :
_MINT_OUT_32

C equivalent :
    uint32_t result = 0;

    uint8_t a_lsb = a&0x00FF;
    uint8_t a_msb = (a&0xFF00)>>8;
    uint8_t b_lsb = b&0x00FF;
    uint8_t b_msb = (b&0xFF00)>>8;

    uint8_t c_lsb;
    c_lsb = ((a_lsb>>1) + (b_lsb>>1) + (a_lsb&b_lsb&0x01)) > 127 ? 0x01 : 0x00;

    result |= static_cast<uint32_t>(static_cast<uint8_t>(a_lsb+b_lsb));

    uint8_t c_msb;
    c_msb = (a_msb>>1) + (b_msb>>1) + (((b_msb&c_lsb) | (a_msb&c_lsb) | (a_msb&b_msb))&0x01);

    result |= (static_cast<uint32_t>(static_cast<uint8_t>(a_msb+b_msb+c_lsb))<<8) | (c_msb>127?0x00010000:0x00000000);

    return result;
]#
function MINT_16to32_u_add
    ##getting c_lsb
    
    #(a_lsb>>1)
    get $_MINT_16_A:MINT_POOL 0
    do _ram >> 1
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(b_lsb>>1)
    get $_MINT_16_B:MINT_POOL 0
    do _ram >> 1
    #store result in operator right
    write BOPRIGHT _result
    
    #store accumulator left into operator left
    select OP OP_AL
    write BOPLEFT _result
    
    #(a_lsb>>1) + (b_lsb>>1)
    select OP +
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(a_lsb&b_lsb&0x01)
    do $_MINT_16_A:MINT_POOL & $_MINT_16_B:MINT_POOL
    do _result 0x01
    
    #store result in operator right
    write BOPRIGHT _result
    
    #store accumulator left into operator left
    select OP OP_AL
    write BOPLEFT _result
    
    #(a_lsb>>1) + (b_lsb>>1) + (a_lsb&b_lsb&0x01)
    select OP +
    
    #(((a_lsb>>1) + (b_lsb>>1) + (a_lsb&b_lsb&0x01)) > 127 ? 0x01 : 0x00)
    do _result 127
    select OP >
    #store result in accumulator right
    write BOPRIGHT _result
    select OP A_OPR
    write BOPRIGHT _result
    
    #a_lsb+b_lsb
    #writing first byte of the 4
    do $_MINT_16_A:MINT_POOL + $_MINT_16_B:MINT_POOL
    get $_MINT_OUT_32:MINT_POOL 0
    affect _result
    
    ##getting c_msb
    
    #(b_msb&c_lsb)
    #store accumulator right into operator right
    select OP OP_AR
    write BOPRIGHT _result
    select OP &
    get $_MINT_16_B:MINT_POOL 1
    write BOPLEFT _ram
    
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(a_msb&b_msb)
    select OP &
    get $_MINT_16_B:MINT_POOL 1
    write BOPRIGHT _ram
    get $_MINT_16_A:MINT_POOL 1
    write BOPLEFT _ram
    
    #store result in operation right
    write BOPRIGHT _result
    
    #store accumulator left into operator left
    select OP OP_AL
    write BOPLEFT _result
    
    #(b_msb&c_lsb) | (a_msb&b_msb)
    select OP |
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(a_msb&c_lsb)
    #store accumulator right into operator right
    select OP OP_AR
    write BOPRIGHT _result
    select OP &
    write BOPLEFT _ram
    
    #store result in operation right
    write BOPRIGHT _result
    
    #(b_msb&c_lsb) | (a_msb&c_lsb) | (a_msb&b_msb)
    #store accumulator left into operator left
    select OP OP_AL
    write BOPLEFT _result
    select OP |
    
    #store result in operation LEFT
    write BOPLEFT _result
    
    #((b_msb&c_lsb) | (a_msb&c_lsb) | (a_msb&b_msb))&0x01
    select OP &
    write BOPRIGHT 0x01
    
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result

    #(a_msb>>1)
    do _ram >> 1
    #store result in operation right
    write BOPRIGHT _result
    #store accumulator left into operator left
    select OP OP_AL
    write BOPLEFT _result
    
    #(a_msb>>1) + ((b_msb&c_lsb) | (a_msb&c_lsb) | (a_msb&b_msb))&0x01
    select OP +
    
    #store result in accumulator left
    write BOPLEFT _result
    select OP A_OPL
    write BOPLEFT _result
    
    #(b_msb>>1)
    get $_MINT_16_B:MINT_POOL 1
    do _ram >> 1
    #store result in operator right
    write BOPRIGHT _result
    
    #store accumulator left into operator left
    select OP OP_AL
    write BOPLEFT _result
    
    #(a_msb>>1) + (b_msb>>1) + ((b_msb&c_lsb) | (a_msb&c_lsb) | (a_msb&b_msb))&0x01
    select OP +
    
    #store result in operation left
    write BOPLEFT _result
    
    #c_msb>127?0x00010000:0x00000000
    select OP >
    write BOPRIGHT 127
    
    #writing third byte of the 4
    get $_MINT_OUT_32:MINT_POOL 2
    affect _result
    
    ##a_msb+b_msb+c_lsb
    get $_MINT_16_B:MINT_POOL 1
    write BOPLEFT _ram
    get $_MINT_16_A:MINT_POOL 1
    write BOPRIGHT _ram
    select OP +
    write BOPLEFT _result
    #store accumulator right into operator right
    select OP OP_AR
    write BOPRIGHT _result
    select OP +
    
    #writing second byte of the 4
    get $_MINT_OUT_32:MINT_POOL 1
    affect _result
    
    #writing fourth byte of the 4
    #TODO: maybe just don't write 0 ? And let user clean that ?
    get $_MINT_OUT_32:MINT_POOL 3
    affect 0x00
    
    jump $_MINT_RET_A_LSB:MINT_POOL $_MINT_RET_A:MINT_POOL $_MINT_RET_A_MSB:MINT_POOL
end
