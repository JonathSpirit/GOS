import ../libraries/ALUminium_model
import ../libraries/common_model

import ../libraries/GCM_V5/srcset/lib_srcset_1_0
import ../libraries/GCM_V5/memuser/lib_memuser_1_0

pool SharedDataPool 200 0 #Creating a shared pool that reserve address 0..199
pool SharedPool 10 200
pool MemoryReaderCodePool 0xFF 0x100 #Here we reserve some RAM space for the complete MemoryReader code

var $ArgStartAddress:SharedPool 3
var $ArgCount:SharedPool
var $WriteAddressLSB:SharedPool

var $MagicByteStat:SharedPool #This byte is usefull in order to know to stat of the code after future reset

var $JumpAddress0
var $JumpAddress1
var $JumpAddress2
var $WriteCount

affect MemoryReaderCodePool 0 @file_brut:sourceMemoryReader.cg@

set _LIB_PUART_SLOT 0
set _LIB_PUART_RET0 $JumpAddress0
set _LIB_PUART_RET1 $JumpAddress1
set _LIB_PUART_RET2 $JumpAddress2
import ../libraries/peripherals/uart/lib_puart_A1_1

function WriteMemoryReaderCodeToUserMemory
    call MEMUSER_select
    call MEMUSER_init
    
    set _MEMUSER_ADDRESS_8 0x00
    call MEMUSER_setAddress_0
    set _MEMUSER_ADDRESS_8 0x00
    call MEMUSER_setAddress_1
    set _MEMUSER_ADDRESS_8 0x00
    call MEMUSER_setAddress_2
    affect $WriteCount 0
    
    label WriteMemoryReaderCodeToUserMemory_loop
    
    #Place WriteCount to accumulator left
    get $WriteCount
    select OP A_OPL
    write BOPLEFT _ram
    
    #Place accumulator left to ram address LSB
    select OP OP_AL
    brut 0x6B #OPCODE_BRAMADD1_CLK | READABLE_RESULT
    brut 0x0C 0x01 #OPCODE_BRAMADD2_CLK | READABLE_SOURCE
    
    #We write the byte to the user memory
    set _MEMUSER_ADDRESS_8 _result
    call MEMUSER_setAddress_0
    set _MEMUSER_DATA_8 _ram
    call MEMUSER_write
    
    #Increment WriteCount and check the loop
    do $WriteCount + 1
    do _result 116 #<- this is the size in bytes of the compiled MemoryReader code
    select OP ==
    if_not _result
        select OP A_OPL #Small optimization in order to avoid doing that again: "do $WriteCount + 1"
        affect $WriteCount _result
        jump WriteMemoryReaderCodeToUserMemory_loop
    end
    
    #We finished
    jump $JumpAddress0 $JumpAddress1 $JumpAddress2
end

do $MagicByteStat:SharedPool == 44
if_not _result
    #We are in a undefined stat so we write the function to user memory
    call WriteMemoryReaderCodeToUserMemory $JumpAddress0 $JumpAddress1 $JumpAddress2
    affect $MagicByteStat:SharedPool 44
    
    #Then we prepare arguments for the MemoryReaderCode that is now inside the second memory
    affect $ArgStartAddress:SharedPool 0x00 0
    affect $ArgStartAddress:SharedPool 0x05 1
    affect $ArgStartAddress:SharedPool 0x00 2
    affect $ArgCount:SharedPool 13
    
    #Now we switch source and the MemoryReaderCode should read data inside the first memory and
    #put it inside pool SharedDataPool
    
    call SRCSET_select
    call SRCSET_switchToSource1
    #the program will not continue as switching source cause auto reset
end

call PUART_chooseUART
call PUART_clearFlags

label main

affect $size:PUART_POOL 13
affect $addressLSB:PUART_POOL 0
call PUART_sendBuffer $JumpAddress0 $JumpAddress1 $JumpAddress2

jump main

offset reach 0x500 #Goto a only data memory zone
brut 'H' 'e' 'l' 'l' 'o' ' ' 'W' 'o' 'r' 'l' 'd' '!' '\n'
